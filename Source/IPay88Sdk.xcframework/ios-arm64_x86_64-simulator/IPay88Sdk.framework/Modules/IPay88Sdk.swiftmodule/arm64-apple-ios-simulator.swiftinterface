// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IPay88Sdk
import CommonCrypto
import Foundation
@_exported import IPay88Sdk
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
public struct HTTPHeaders {
  public init()
  public init(_ headers: [IPay88Sdk.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: IPay88Sdk.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: IPay88Sdk.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> IPay88Sdk.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension IPay88Sdk.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension IPay88Sdk.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: IPay88Sdk.HTTPHeader...)
  public typealias ArrayLiteralElement = IPay88Sdk.HTTPHeader
}
extension IPay88Sdk.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[IPay88Sdk.HTTPHeader]>
}
extension IPay88Sdk.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> IPay88Sdk.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = IPay88Sdk.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<IPay88Sdk.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[IPay88Sdk.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<IPay88Sdk.HTTPHeaders>
}
extension IPay88Sdk.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: IPay88Sdk.HTTPHeader, b: IPay88Sdk.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IPay88Sdk.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IPay88Sdk.HTTPHeader {
  public static func accept(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func authorization(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func contentType(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> IPay88Sdk.HTTPHeader
}
extension IPay88Sdk.HTTPHeaders {
  public static let `default`: IPay88Sdk.HTTPHeaders
}
extension IPay88Sdk.HTTPHeader {
  public static let defaultAcceptEncoding: IPay88Sdk.HTTPHeader
  public static let defaultAcceptLanguage: IPay88Sdk.HTTPHeader
  public static let defaultUserAgent: IPay88Sdk.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: IPay88Sdk.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: IPay88Sdk.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: IPay88Sdk.HTTPHeaders {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class IPay88PayResponse : Swift.Codable {
  public var paymentId: Swift.Int?, status: Swift.Int?
  public var amount: Swift.Double?
  public var merchantCode: Swift.String?, refNo: Swift.String?
  public var currency: Swift.String?, remark: Swift.String?, transId: Swift.String?, authCode: Swift.String?
  public var errDesc: Swift.String?, signature: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IPay88ViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var delegate: IPay88Sdk.IPay88Delegate!
  @_Concurrency.MainActor(unsafe) public var payRequest: IPay88Sdk.IPay88PayRequest!
  @objc dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
}
extension IPay88Sdk.IPay88ViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension IPay88Sdk.IPay88ViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension IPay88Sdk.IPay88ViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public protocol IPay88Delegate {
  func onResponse(payResponse: IPay88Sdk.IPay88PayResponse)
  func onFailure(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class IPay88Deeplink : Swift.Codable {
  public var id: Swift.Int?
  public var url: Swift.String?
  public var appStoreId: Swift.Int?
  public var playStoreId: Swift.String?
  public var status: Swift.Bool?
  public var createdDate: Swift.String?, updatedDate: Swift.String?, updatedBy: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IPay88PayRequest : Swift.Codable {
  public var merchantCode: Swift.String
  public var merchantKey: Swift.String
  public var paymentId: Swift.Int
  public var refNo: Swift.String
  public var amount: Swift.Double
  public var currency: IPay88Sdk.IPay88PayRequest.Currency
  public var prodDesc: Swift.String
  public var userName: Swift.String
  public var userEmail: Swift.String
  public var userContact: Swift.String
  public var remark: Swift.String?
  public var signature: Swift.String? {
    get
  }
  public var backendURL: Swift.String?
  public var eId: Swift.String?
  public var errDesc: Swift.String?
  public var environment: IPay88Sdk.IPay88PayRequest.Environment
  public enum Environment : Swift.String {
    case DVL
    case SANDBOX
    case PRODUCTION
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Currency : Swift.String {
    case KHR
    case USD
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  required public init()
  public init(environment: IPay88Sdk.IPay88PayRequest.Environment, merchantCode: Swift.String, merchantKey: Swift.String, paymentId: Swift.Int, refNo: Swift.String, amount: Swift.Double, currency: IPay88Sdk.IPay88PayRequest.Currency, prodDesc: Swift.String, userName: Swift.String, userEmail: Swift.String, userContact: Swift.String, remark: Swift.String?, backendURL: Swift.String?)
  public func adjust() -> IPay88Sdk.IPay88PayRequest
  public func getBackendURL() -> Swift.String
  public func getPaymentUrl() -> Swift.String
  public func getDeeplinkListUrl() -> Swift.String
  public func getQueryUrl() -> Swift.String
  public func getCancelUrl() -> Swift.String
  public func getSignature(paymentId: Swift.Int, status: Swift.Int) -> Swift.String
  public func getAmount() -> Swift.String
  public func getFormBody() -> Foundation.Data
  public func getFormBodyQuery() -> Foundation.Data
  public func params() -> Foundation.Data
  public func validate() -> Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IPay88PaymentInfo : Swift.Codable {
  public var eId: Swift.String?
  public var errDesc: Swift.String?
  required public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension IPay88Sdk.IPay88PayRequest.Environment : Swift.Equatable {}
extension IPay88Sdk.IPay88PayRequest.Environment : Swift.Hashable {}
extension IPay88Sdk.IPay88PayRequest.Environment : Swift.RawRepresentable {}
extension IPay88Sdk.IPay88PayRequest.Currency : Swift.Equatable {}
extension IPay88Sdk.IPay88PayRequest.Currency : Swift.Hashable {}
extension IPay88Sdk.IPay88PayRequest.Currency : Swift.RawRepresentable {}
